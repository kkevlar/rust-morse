// main.rs

#![no_std]
#![no_main]

extern crate heapless;
extern crate morse_utils;
extern crate panic_halt; // v0.4.x

use arduino_uno::hal::port::mode::Output;
use arduino_uno::hal::port::portb::PB5;
use arduino_uno::prelude::*;

use heapless::consts::*;
use heapless::FnvIndexMap;
use heapless::Vec;

fn stutter_blink(led: &mut PB5<Output>, times: i16) {
    for i in 0..times {
        led.toggle().void_unwrap();
        arduino_uno::delay_ms(100);
        led.toggle().void_unwrap();
        arduino_uno::delay_ms(100);
    }
    arduino_uno::delay_ms(1000);
}

use morse_utils::morse_utils::*;

fn helper_fill_events_slice<T>(durations: &[i64], vec: &mut Vec<TimedLightEvent, T>)
where
    T: heapless::ArrayLength<TimedLightEvent>,
{
    for (i, duration) in durations.iter().enumerate() {
        vec.push(TimedLightEvent {
            light_state: {
                if i % 2 == 0 {
                    LightState::Dark
                } else {
                    LightState::Dark
                }
            },
            duration: *duration,
        })
        .unwrap();
    }
}

fn best_error_helper(light_state: LightState, duration: i64, units: i64) -> i64 {
    match best_error(
        &TimedLightEvent {
            light_state,
            duration,
        },
        units,
    ) {
        Ok(s) => s.score,
        _ => 200000,
    }
}

macro_rules! hashmap {
    ($( $key: expr => $val: expr ),*) => {{
         let mut map = ::heapless::FnvIndexMap::new();
         $( map.insert($key, $val); )*
         map
    }}
}

#[arduino_uno::entry]
fn main() -> ! {
    let peripherals = arduino_uno::Peripherals::take().unwrap();

    let mut pins = arduino_uno::Pins::new(peripherals.PORTB, peripherals.PORTC, peripherals.PORTD);

    let mut led = pins.d13.into_output(&mut pins.ddr);

    let test_durations = [
        700, 300, 100, 100, 100, 100, 100, 100, 300, 300, 100, 300, 100, 300, 300, 100, 100, 100,
        100, 300, 300, 300, 300, 300, 300, 100, 300, 300, 300, 100, 100, 700, 300, 100, 300, 100,
        300, 300, 300, 100, 300, 100, 300, 300, 100, 100, 100, 100, 300, 100, 100, 700,
    ];
    let intensities = [
        (4480, 14),
        (4490, 19),
        (4500, 51),
        (4510, 56),
        (4520, 57),
        (4530, 58),
        (4540, 58),
        (4550, 58),
        (4560, 59),
        (4570, 58),
        (4580, 56),
        (4590, 23),
        (4600, 16),
        (4610, 13),
        (4620, 10),
        (4630, 9),
        (4640, 9),
        (4650, 10),
        (4660, 11),
        (4670, 12),
        (4680, 13),
        (4690, 12),
        (4700, 11),
        (4710, 449),
        (4720, 422),
        (4730, 435),
        (4740, 44),
        (4750, 18),
        (4760, 15),
        (4770, 541),
        (4780, 562),
        (4790, 554),
        (4800, 549),
        (4810, 553),
        (4820, 558),
        (4830, 570),
        (4840, 586),
        (4850, 594),
        (4860, 59),
        (4870, 24),
        (4880, 19),
        (4890, 18),
        (4900, 17),
        (4910, 16),
        (4920, 16),
        (4930, 15),
        (4940, 15),
        (4950, 590),
        (4960, 594),
        (4970, 594),
        (4980, 595),
        (4990, 594),
        (5000, 594),
        (5010, 593),
        (5020, 593),
        (5030, 593),
        (5040, 36),
        (5050, 21),
        (5060, 18),
        (5070, 591),
        (5080, 593),
        (5090, 596),
        (5100, 42),
        (5110, 21),
        (5120, 18),
        (5130, 607),
        (5140, 608),
        (5150, 606),
        (5160, 40),
        (5170, 21),
        (5180, 18),
        (5190, 608),
        (5200, 609),
        (5210, 609),
        (5220, 47),
        (5230, 22),
        (5240, 19),
        (5250, 17),
        (5260, 16),
        (5270, 16),
        (5280, 16),
        (5290, 16),
        (5300, 16),
        (5310, 644),
        (5320, 641),
        (5330, 638),
        (5340, 635),
        (5350, 633),
        (5360, 633),
        (5370, 633),
        (5380, 634),
        (5390, 636),
        (5400, 34),
        (5410, 23),
        (5420, 20),
        (5430, 637),
        (5440, 638),
        (5450, 639),
        (5460, 38),
        (5470, 23),
        (5480, 20),
        (5490, 639),
        (5500, 642),
        (5510, 642),
        (5520, 642),
        (5530, 644),
        (5540, 644),
        (5550, 636),
        (5560, 638),
        (5570, 641),
        (5580, 33),
        (5590, 22),
        (5600, 20),
        (5610, 607),
        (5620, 599),
        (5630, 600),
        (5640, 33),
        (5650, 22),
        (5660, 21),
        (5670, 20),
        (5680, 19),
        (5690, 19),
        (5700, 18),
        (5710, 18),
        (5720, 567),
        (5730, 632),
        (5740, 640),
        (5750, 641),
        (5760, 641),
        (5770, 640),
        (5780, 639),
        (5790, 637),
        (5800, 633),
        (5810, 118),
        (5820, 29),
        (5830, 23),
        (5840, 598),
        (5850, 628),
        (5860, 627),
        (5870, 395),
        (5880, 32),
        (5890, 24),
        (5900, 22),
        (5910, 630),
        (5920, 636),
        (5930, 637),
        (5940, 34),
        (5950, 25),
        (5960, 22),
        (5970, 21),
        (5980, 20),
        (5990, 20),
        (6000, 20),
        (6010, 19),
        (6020, 553),
        (6030, 636),
        (6040, 633),
        (6050, 291),
        (6060, 31),
        (6070, 24),
        (6080, 22),
        (6090, 21),
        (6100, 20),
        (6110, 20),
        (6120, 19),
        (6130, 19),
        (6140, 632),
        (6150, 639),
        (6160, 638),
        (6170, 132),
        (6180, 31),
        (6190, 24),
        (6200, 627),
        (6210, 637),
        (6220, 639),
        (6230, 176),
        (6240, 31),
        (6250, 24),
        (6260, 435),
        (6270, 626),
        (6280, 627),
        (6290, 626),
        (6300, 627),
        (6310, 625),
        (6320, 626),
        (6330, 628),
        (6340, 625),
        (6350, 178),
        (6360, 31),
        (6370, 24),
        (6380, 495),
        (6390, 624),
        (6400, 623),
        (6410, 412),
        (6420, 32),
        (6430, 24),
        (6440, 22),
        (6450, 21),
        (6460, 21),
        (6470, 20),
        (6480, 20),
        (6490, 20),
        (6500, 609),
        (6510, 622),
        (6520, 618),
        (6530, 617),
        (6540, 617),
        (6550, 614),
        (6560, 606),
        (6570, 598),
        (6580, 594),
        (6590, 88),
        (6600, 29),
        (6610, 24),
        (6620, 615),
        (6630, 625),
        (6640, 625),
        (6650, 623),
        (6660, 624),
        (6670, 625),
        (6680, 623),
        (6690, 622),
        (6700, 623),
        (6710, 65),
        (6720, 27),
        (6730, 23),
        (6740, 618),
        (6750, 622),
        (6760, 622),
        (6770, 76),
        (6780, 28),
        (6790, 24),
        (6800, 22),
        (6810, 21),
        (6820, 21),
        (6830, 20),
        (6840, 21),
        (6850, 20),
        (6860, 599),
        (6870, 604),
        (6880, 605),
        (6890, 62),
        (6900, 27),
        (6910, 23),
        (6920, 605),
        (6930, 604),
        (6940, 604),
        (6950, 79),
        (6960, 28),
        (6970, 23),
        (6980, 601),
        (6990, 608),
        (7000, 605),
        (7010, 102),
        (7020, 29),
        (7030, 23),
        (7040, 605),
        (7050, 615),
        (7060, 614),
        (7070, 139),
        (7080, 30),
        (7090, 24),
        (7100, 23),
        (7110, 22),
        (7120, 22),
        (7130, 21),
        (7140, 20),
        (7150, 20),
        (7160, 600),
        (7170, 609),
        (7180, 609),
        (7190, 145),
        (7200, 30),
        (7210, 24),
        (7220, 597),
        (7230, 607),
        (7240, 607),
        (7250, 130),
        (7260, 30),
        (7270, 24),
        (7280, 22),
        (7290, 21),
        (7300, 20),
        (7310, 20),
        (7320, 20),
        (7330, 20),
        (7340, 598),
        (7350, 607),
        (7360, 600),
        (7370, 109),
        (7380, 30),
        (7390, 24),
        (7400, 588),
        (7410, 613),
        (7420, 615),
        (7430, 610),
        (7440, 601),
        (7450, 597),
        (7460, 601),
        (7470, 608),
        (7480, 613),
        (7490, 116),
        (7500, 30),
        (7510, 24),
        (7520, 606),
        (7530, 618),
        (7540, 617),
        (7550, 618),
        (7560, 619),
        (7570, 620),
        (7580, 622),
        (7590, 622),
        (7600, 615),
        (7610, 90),
        (7620, 30),
        (7630, 24),
        (7640, 615),
        (7650, 618),
        (7660, 617),
        (7670, 619),
        (7680, 621),
        (7690, 624),
        (7700, 625),
        (7710, 629),
        (7720, 631),
        (7730, 82),
        (7740, 28),
        (7750, 23),
        (7760, 22),
        (7770, 20),
        (7780, 20),
        (7790, 20),
        (7800, 20),
        (7810, 20),
        (7820, 635),
        (7830, 638),
        (7840, 636),
        (7850, 633),
        (7860, 629),
        (7870, 628),
        (7880, 624),
        (7890, 618),
        (7900, 612),
        (7910, 47),
        (7920, 28),
        (7930, 25),
        (7940, 595),
        (7950, 599),
        (7960, 600),
        (7970, 47),
        (7980, 28),
        (7990, 24),
        (8000, 598),
        (8010, 595),
        (8020, 594),
        (8030, 593),
        (8040, 593),
        (8050, 596),
        (8060, 598),
        (8070, 600),
        (8080, 599),
        (8090, 45),
        (8100, 28),
        (8110, 24),
        (8120, 23),
        (8130, 22),
        (8140, 22),
        (8150, 22),
        (8160, 21),
        (8170, 21),
        (8180, 585),
        (8190, 586),
        (8200, 590),
        (8210, 43),
        (8220, 28),
        (8230, 25),
        (8240, 588),
        (8250, 597),
        (8260, 605),
        (8270, 613),
        (8280, 609),
        (8290, 605),
        (8300, 602),
        (8310, 601),
        (8320, 600),
        (8330, 44),
        (8340, 28),
        (8350, 25),
        (8360, 599),
        (8370, 605),
        (8380, 601),
        (8390, 47),
        (8400, 28),
        (8410, 25),
        (8420, 592),
        (8430, 589),
        (8440, 586),
        (8450, 64),
        (8460, 33),
        (8470, 39),
        (8480, 41),
        (8490, 35),
        (8500, 31),
        (8510, 29),
        (8520, 26),
        (8530, 26),
        (8540, 623),
        (8550, 632),
        (8560, 633),
        (8570, 631),
        (8580, 628),
        (8590, 624),
        (8600, 622),
        (8610, 621),
        (8620, 622),
        (8630, 70),
        (8640, 43),
        (8650, 44),
        (8660, 615),
        (8670, 616),
        (8680, 613),
        (8690, 610),
        (8700, 608),
        (8710, 607),
        (8720, 607),
        (8730, 604),
        (8740, 605),
        (8750, 74),
        (8760, 57),
        (8770, 53),
        (8780, 51),
        (8790, 50),
        (8800, 49),
        (8810, 48),
        (8820, 48),
        (8830, 49),
        (8840, 611),
        (8850, 614),
        (8860, 614),
        (8870, 613),
        (8880, 613),
        (8890, 612),
        (8900, 609),
        (8910, 602),
        (8920, 594),
        (8930, 64),
        (8940, 54),
        (8950, 51),
        (8960, 591),
        (8970, 574),
        (8980, 578),
        (8990, 570),
        (9000, 553),
        (9010, 549),
        (9020, 551),
        (9030, 552),
        (9040, 539),
        (9050, 62),
        (9060, 54),
        (9070, 52),
        (9080, 540),
        (9090, 541),
        (9100, 542),
        (9110, 536),
        (9120, 529),
        (9130, 529),
        (9140, 525),
        (9150, 525),
        (9160, 154),
        (9170, 60),
        (9180, 54),
        (9190, 52),
        (9200, 51),
        (9210, 52),
        (9220, 51),
        (9230, 53),
        (9240, 54),
        (9250, 59),
        (9260, 59),
        (9270, 59),
        (9280, 59),
        (9290, 59),
        (9300, 59),
        (9310, 59),
        (9320, 59),
        (9330, 59),
        (9340, 59),
        (9350, 59),
        (9360, 59),
        (9370, 59),
        (9380, 59),
        (9390, 59),
        (9400, 59),
        (9410, 59),
        (9420, 59),
        (9430, 59),
        (9440, 59),
        (9450, 59),
        (9460, 59),
        (9470, 59),
        (9480, 59),
        (9490, 59),
        (9500, 59),
        (9510, 59),
        (9520, 59),
        (9530, 59),
        (9540, 59),
        (9550, 59),
        (9560, 59),
        (9570, 59),
        (9580, 59),
        (9590, 60),
        (9600, 59),
        (9610, 59),
        (9620, 59),
        (9630, 59),
        (9640, 59),
        (9650, 59),
        (9660, 59),
        (9670, 59),
        (9680, 59),
        (9690, 60),
        (9700, 59),
        (9710, 59),
        (9720, 59),
        (9730, 59),
        (9740, 59),
        (9750, 60),
        (9760, 59),
        (9770, 59),
        (9780, 59),
    ];

    let mut timed_light_events: Vec<_, U4096> = Vec::new();
    convert(&intensities, &mut timed_light_events, 0).unwrap();

  let unit = estimate_unit_time(&timed_light_events, 0, 1000)
        .unwrap()
        .item;

    let r: Vec<Scored<&MorseCandidate>, U4096> = timed_light_events
        .iter()
        .map(|tle| morse_utils::best_error(tle, unit))
        .filter_map(Result::ok)
        .collect();   

  let r: Vec<morse_utils::Morse, U4096> = r
        .into_iter()
        .map(|s| morse_utils::mc_to_morse(s.item))
        .collect();

  let morse_key: FnvIndexMap<&str, char> = hashmap![
    "01" => 'a',
    "1000" => 'b',
    "1010" => 'c',
    "100" => 'd',
    "0" => 'e',
    "0010" => 'f',
    "110" => 'g',
    "0000" => 'h',
    "00" => 'i',
    "0111" => 'j',
    "101" => 'k',
    "0100" => 'l',
    "11" => 'm',
    "10" => 'n',
    "111" => 'o',
    "0110" => 'p',
    "1101" => 'q',
    "010" => 'r',
    "000" => 's',
    "1" => 't',
    "001" => 'u',
    "0001" => 'v',
    "011" => 'w',
    "1001" => 'x',
    "1011" => 'y',
    "1100" => 'z'
    ];

    // stutter_blink(&mut led, 1);
    // arduino_uno::delay_ms(1000);
    // stutter_blink(&mut led, 2);

    // let mut timed_light_events: Vec<TimedLightEvent, U128> = Vec::new();
    // helper_fill_events_slice(&test_durations, &mut timed_light_events);

    // arduino_uno::delay_ms(1000);
    // stutter_blink(&mut led, 3);

    // let expected: Scored<i64> = Scored {
    //     item: 100,
    //     score: 0,
    // };
    // match estimate_unit_time(&timed_light_events, 90, 110) {
    //     Ok(actual) if expected == actual => loop {
    //         stutter_blink(&mut led, 5);
    //         arduino_uno::delay_ms(1000);
    //     },
    //     Err(_) => loop {
    //         stutter_blink(&mut led, 3);
    //         arduino_uno::delay_ms(1000);
    //     },
    //     _ => loop {
    //         stutter_blink(&mut led, 1);
    //         arduino_uno::delay_ms(1000);
    //     },
    // };
    loop {}
}
